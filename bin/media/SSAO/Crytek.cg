void Crytek_fp
(
	in float2 fragmentTC : TEXCOORD0,
	
	out float4 oColor0 : COLOR0,
	
	uniform sampler sSceneDepthSampler : register(s0), // depth = w component [0, 1]
	uniform sampler sRotSampler4x4 : register(s1),  // rotation sampler -> pseudo random spherical weighted sampling
	uniform float4 cViewportSize, // auto param width/height/inv. width/inv. height
	uniform float farClipDistance,
	uniform float nearClipDistance,

	uniform float cEdgeHighlight_div24,
	//uniform float cSampleNum,
	//uniform float cSampleNum_div8,
	uniform float c1divFov, // vertival field of view in radians
	uniform float c1divSampleLengthWorldSpace, // the sample length in world space in units
	uniform float cSampleLengthWorldSpace, // the sample length in world space in units
	uniform float cDefaultAccessibility, // the default value used in the lerp() expression for invalid samples [0, 1]
	uniform float cOffsetScale // [0, 1] The distance of the first sample. samples are the 
	
	//uniform float cEdgeHighlight // multiplicator for edge highlighting in [1, 2] 1 is full hightlighting 2 is off

)
{
	// compute the distance between the clipping planes to convert [0, 1] depth to world space units
	const float clipDepth = farClipDistance - nearClipDistance;

	// get the depth of the current pixel and convert into world space unit [0, inf]
	float fragmentWorldDepth = tex2D(sSceneDepthSampler, fragmentTC).x * clipDepth;

	// get rotation vector, rotation is tiled every 4 screen pixels
	float2 rotationTC = fragmentTC * cViewportSize.xy / 4;
	float3 rotationVector = 2 * tex2D(sRotSampler4x4, rotationTC).xyz - 1; // [-1, 1]x[-1. 1]x[-1. 1]
	
	float rUV = 0; // radius of influence in screen space
	float r = 0; // radius of influence in world space

	rUV = atan(cSampleLengthWorldSpace / fragmentWorldDepth) * c1divFov; // the radius of influence projected into screen space

	float sampleLength = cOffsetScale; // the offset for the first sample
	const float sampleLengthStep = pow((rUV / sampleLength), 1.0f/24.0f);
	
	float accessibility = 0;

	for (int i = 0; i < 3 ; i++)
	{
		for (int x = 0; x <= 2; x += 2)
		for (int y = 0; y <= 2; y += 2)
		for (int z = 0; z <= 2; z += 2)
		{
			//generate offset vector
			float3 offset = normalize(float3( (x-1), (y-1), (z-1) )) * sampleLength;
			
			// update sample length
			sampleLength *= sampleLengthStep;
		
			// reflect offset vector by random rotation sample (i.e. rotating it) 
			float3 rotatedOffset = reflect(offset, rotationVector);
					
			float2 sampleTC = fragmentTC + rotatedOffset.xy * rUV;
				
			// read scene depth at sampling point and convert into world space units (m or whatever)
			float sampleWorldDepth = tex2D(sSceneDepthSampler, sampleTC).x * clipDepth;
			
			// check if depths of both pixles are close enough and sampling point should affect our center pixel
			float fRangeIsInvalid = saturate((fragmentWorldDepth - sampleWorldDepth) * c1divSampleLengthWorldSpace);
			
			// accumulate accessibility, use default value of 0.5 if right computations are not possible
			accessibility += lerp(sampleWorldDepth > (fragmentWorldDepth + rotatedOffset.z * cSampleLengthWorldSpace), cDefaultAccessibility, fRangeIsInvalid);

		}
	}

	accessibility *= cEdgeHighlight_div24;

	// get average value
	//accessibility /= nSampleNum;

	// normalize, remove edge hightlighting
	//accessibility *= cEdgeHighlight;
	
	// amplify and saturate if necessary
	accessibility = clamp(accessibility, 0.0f,1.0f);
	oColor0 = float4(accessibility.xxx, 1);
}


